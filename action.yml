name: Changelog Management
description: Provides tasks for changelogs in Keep a Changelog 1.0.0 format, including releasing, reading, and adding new changes.
branding:
  icon: list
  color: yellow
inputs:
  path:
    description: Path to relative to the root of the project to a CHANGELOG.md file in Keep a Changelog 1.0.0 format. Defaults to CHANGELOG.md in the root of the project.
    required: false
    default: CHANGELOG.md
  mode:
    description: Mode for the action. Should be one of `readdata`, `release`, or `addchange`. Defaults to `readdata`.
    required: false
    default: readdata
  releaseVersion:
    description:  Version number to use when updating a changelog for release. Only valid for mode `release`.
    required: false
  linkMode:
    description: Link mode. Should be either `GitHub` or `None`. Only valid for `release`
    required: false
    default: GitHub
  changeType:
    description: Type of change to add. Should be one of `Added`, `Changed`, `Deprecated`, `Removed`, `Fixed`, or `Security`. Only valid for mode `addchange`.
    required: false
  changeValue:
    description: Data for the change to add. Should be a single line string.  Only valid for mode `addchange`.
    required: false
outputs:
  lastVersion:
    description: The version number of the latest release in the changelog.
    value: ${{ steps.readdata.outputs.lastVersion }}
  releaseNotes:
    description: Release notes composed of changes from the most recent release.
    value: ${{ steps.readdata.outputs.releaseNotes }}
runs:
  using: composite
  steps:
    - name: Validate Inputs
      id: validateinputs
      run: . "$env:GITHUB_ACTION_PATH\src\steps\1_validateinputs.ps1"
      shell: pwsh
      env:
        INPUT_PATH: ${{ inputs.path }}
        INPUT_MODE: ${{ inputs.mode }}
        INPUT_RELEASEVERSION: ${{ inputs.releaseVersion }}
        INPUT_CHANGETYPE: ${{ inputs.changeType }}
        INPUT_CHANGEVALUE: ${{ inputs.changeValue }}
        INPUT_LINKMODE: ${{ inputs.linkMode }}
    - name: Install Module
      id: installmodule
      run: . "$env:GITHUB_ACTION_PATH\src\steps\2_installmodule.ps1"
      shell: pwsh
      env:
        INPUT_PATH: ${{ inputs.path }}
        INPUT_MODE: ${{ inputs.mode }}
        INPUT_RELEASEVERSION: ${{ inputs.releaseVersion }}
        INPUT_CHANGETYPE: ${{ inputs.changeType }}
        INPUT_CHANGEVALUE: ${{ inputs.changeValue }}
    - name: Add Change
      id: addchange
      run: |
        if ($env:INPUT_MODE -eq "addchange") {
          . "$env:GITHUB_ACTION_PATH\src\steps\3_addchange.ps1"
        }
      shell: pwsh
      env:
        INPUT_PATH: ${{ inputs.path }}
        INPUT_MODE: ${{ inputs.mode }}
        INPUT_RELEASEVERSION: ${{ inputs.releaseVersion }}
        INPUT_CHANGETYPE: ${{ inputs.changeType }}
        INPUT_CHANGEVALUE: ${{ inputs.changeValue }}
    - name: Release
      id: release
      run: |
        if ($env:INPUT_MODE -eq "release") {
          . "$env:GITHUB_ACTION_PATH\src\steps\4_release.ps1"
        }
      shell: pwsh
      env:
        INPUT_PATH: ${{ inputs.path }}
        INPUT_MODE: ${{ inputs.mode }}
        INPUT_RELEASEVERSION: ${{ inputs.releaseVersion }}
        INPUT_CHANGETYPE: ${{ inputs.changeType }}
        INPUT_CHANGEVALUE: ${{ inputs.changeValue }}
        INPUT_LINKMODE: ${{ inputs.linkMode }}
    - name: Read Data
      id: readdata
      run: . "$env:GITHUB_ACTION_PATH\src\steps\5_readdata.ps1"
      shell: pwsh
      env:
        INPUT_PATH: ${{ inputs.path }}
        INPUT_MODE: ${{ inputs.mode }}
        INPUT_RELEASEVERSION: ${{ inputs.releaseVersion }}
        INPUT_CHANGETYPE: ${{ inputs.changeType }}
        INPUT_CHANGEVALUE: ${{ inputs.changeValue }}